{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","class","aria-hidden","duration","easing","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","todos","filteredItems","filter","console","log","onSubmit","this","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TA+BeA,MA3Bf,SAAmBC,GAClB,IAESC,EAFKD,EAAME,MAEOC,KAAI,SAAAC,GACxB,OAAQ,yBAAKC,UAAU,OAAOC,IAAMF,EAAKE,KACrC,2BACA,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACXC,SAAU,SAACC,GACXZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAErC,0BAAMS,QAAS,kBAAKf,EAAMgB,WAAWZ,EAAKE,OACzC,uBAAGW,MAAM,cAAcC,cAAY,eAO5C,OACG,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAAenB,KC+D3CoB,E,kDAnFb,aAAc,IAAD,8BACX,gBAUFC,YAAa,SAAAV,GACX,EAAKW,SAAS,CACZC,YAAY,CACVd,KAAME,EAAEE,OAAOL,MACfH,IAAKmB,KAAKC,UAfH,EAoBXC,QAAU,SAAAf,GACRA,EAAEgB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAqB,KAAjBK,EAAQnB,KAAa,CACvB,IAAMqB,EAAK,sBAAO,EAAKD,MAAM5B,OAAlB,CAAyB2B,IACpC,EAAKN,SAAS,CACZrB,MAAO6B,EACPP,YAAa,CACXd,KAAM,GACNJ,IAAK,QA7BF,EAmCXU,WAAa,SAAAV,GAEX,IAAM0B,EAAe,EAAKF,MAAM5B,MAAM+B,QAAO,SAAA7B,GAAI,OAC/CA,EAAKE,MAAMA,KACb,EAAKiB,SAAS,CACZrB,MAAO8B,KAxCA,EA8CXnB,UAAY,SAACH,EAAMJ,GAEjB4B,QAAQC,IAAI,SAAS,EAAKL,MAAM5B,OAChC,IAAMA,EAAQ,EAAK4B,MAAM5B,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZ4B,QAAQC,IAAI/B,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAGf,EAAKa,SAAS,CACZrB,MAAOA,KAvDT,EAAK4B,MAAM,CACT5B,MAAO,GACPsB,YAAY,CACVd,KAAK,GACLJ,IAAI,KANC,E,qDAiEX,OACE,yBAAKD,UAAU,OACX,gCACE,0BAAMG,GAAG,aAAa4B,SAAUC,KAAKV,SACnC,2BAAOpB,KAAK,OAAO+B,YAAY,cAAc7B,MAAO4B,KAAKP,MAAMN,YAAYd,KAAMC,SAAU0B,KAAKf,cAChG,4BAAQf,KAAK,UAAb,cAGJ,kBAAC,EAAD,CACAS,WAAYqB,KAAKrB,WACjBd,MAAOmC,KAAKP,MAAM5B,MAClBW,UAAWwB,KAAKxB,iB,GA7ER0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.c50f7413.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css';\nimport FlipMove from 'react-flip-move';\n\nfunction ListItems(props){\n const items = props.items;\n\n    const listItems = items.map(item => {\n        return (<div className=\"list\" key ={item.key}>\n            <p>\n            <input type=\"text\" \n            id={item.key} \n            value={item.text}\n             onChange={(e)=>{\n             props.setUpdate(e.target.value,item.key)}}  \n             />\n            <span onClick={()=> props.deleteItem(item.key)}>\n             <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n            </span> \n            </p>\n            \n        </div>)\n    })\n\n    return (\n       <div>\n           <FlipMove duration={300} easing=\"ease-in-out\">{listItems}</FlipMove>\n       </div>\n    )\n}\n\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n      this.state={\n        items: [],\n        currentItem:{\n          text:'',\n          key:''\n        }\n      }\n  }\n\n  handleInput= e =>{\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n    }\n\n    addItem = e => {\n      e.preventDefault();\n      const newItem = this.state.currentItem;\n      if (newItem.text !== \"\") {\n        const todos = [...this.state.items, newItem]\n        this.setState({\n          items: todos,\n          currentItem: { \n            text: \"\",\n            key: \"\" \n          }\n        });\n      }\n    };\n\n    deleteItem = key => {\n\n      const filteredItems= this.state.items.filter(item =>\n        item.key!==key);\n      this.setState({\n        items: filteredItems\n      })\n  \n      \n    };\n\n    setUpdate = (text, key) => {\n\n      console.log(\"items:\"+this.state.items);\n      const items = this.state.items;\n      items.map(item=>{      \n        if(item.key===key){\n          console.log(item.key +\"    \"+key)\n          item.text= text;\n        }\n      })\n      this.setState({\n        items: items\n      })\n      \n    };\n\n    setUpdate\n\n  render(){\n    return (\n      <div className=\"App\">\n          <header>\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\n              <input type=\"text\" placeholder=\"Create list\" value={this.state.currentItem.text} onChange={this.handleInput} />\n              <button type=\"submit\">Add List</button>\n            </form>\n          </header>\n          <ListItems \n          deleteItem={this.deleteItem} \n          items={this.state.items}\n          setUpdate={this.setUpdate} />\n      </div>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}